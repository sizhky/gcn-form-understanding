# -*- coding: utf-8 -*-
"""Copy of gcn-form-understanding.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rBtuZ32pWcS9-U6QcLTgPzjj8yW6eu72

# Form Understanding

## Dependencies
"""

import torch.utils.data as data
import glob
import time

from random import randrange
from dgl.nn.pytorch import GATConv, GraphConv
import matplotlib.pyplot as plt
import dgl.function as fn

from torch import nn
import torch

import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import os
import sys

import numpy as np
import xml.etree.ElementTree as ET
import networkx as nx
import pdb

import re
import torch 
import dgl
from torch.optim.lr_scheduler import StepLR
from torch.utils.data import DataLoader
from utils import *
from evaluate import *
from model import Net
from datasets import FUNSD,collate
from test import *


"""## Get ground truth"""
if not os.path.exists('funsd.tar.gz'):
    os.system('wget --no-check-certificate '+ "'https://docs.google.com/uc?export=download&id=1Y8UQe4-2uLti_YbnyZbwSWpUnC6kUZVj'"+' -O funsd.tar.gz')
    os.system('tar -zxvf funsd.tar.gz')

"""## Auxiliary functions"""




def adjacency_to_pairs_and_labels(am):
    pairs=[]
    labels=[]
    for i in range(am.shape[0]):
        for j in range(am.shape[1]):
            pairs.append((i,j))
            labels.append(am[i,j])

    return pairs,labels



"""## Graph dataloader"""

"""#### Define Dataset Class
Pytorch provides an abstract class representig a dataset, ```torch.utils.data.Dataset```. We need to override two methods:

*   ```__len__``` so that ```len(dataset)``` returns the size of the dataset.
*   ```__getitem__``` to support the indexing such that ```dataset[i]``` can be used to get i-th sample
"""


# Define the corresponding subsets for train, validation and test.
#trainset = Pages(os.path.join(dataset_path, distortion), 'train.cxl')
"""### Prepare DataLoader

```torch.utils.data.DataLoader``` is an iterator which provides:


*   Data batching
*   Shuffling the data
*   Parallel data loading

In our specific case, we need to deal with graphs of many sizes. Hence, we define a new collate function makin guse of the method ```dgl.batch```.
"""



"""## Model"""


"""## Define data loaders"""

train_dir='training_data/annotations'
test_dir='testing_data/annotations'

trainset = FUNSD(train_dir,'')
validset = FUNSD(test_dir,'')
testset = FUNSD(test_dir,'')

train_loader = DataLoader(trainset, batch_size=1, shuffle=True,collate_fn=collate)
valid_loader = DataLoader(validset, batch_size=1, collate_fn=collate)
test_loader = DataLoader(testset, batch_size=1, collate_fn=collate)

"""# Train step"""


"""## Training setup"""

def train(model):
    if torch.cuda.is_available():
        model = model.cuda()
    loss_func = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)
    scheduler = StepLR(optimizer, 5, gamma = 0.9)
    model.train()
    
    def random_choice(tensor,k=100):
        perm = torch.randperm(tensor.size(0))
        idx = perm[:k]
        samples = tensor[idx]
        return samples

    epoch_losses = []
    train_log = open('train_log.txt','w')
    train_log.close()
    best_acc =0
    best_components_error = 200
    patience = 100
    epochs_no_improvement=0
    for epoch in range(100):
        epoch_loss = 0
        epoch_labeling_loss=0
        epoch_group_loss = 0
        epoch_link_loss = 0
        print("\n\n")
        model.training=True
        for iter, (input_graph, group_labels,entity_labels,link_labels) in enumerate(train_loader):
            group_labels = group_labels[0]
            progress = 100*float(iter)/len(train_loader)
            progress = float("{:.2f}".format(progress))
            print('Epoch '+str(epoch)+' '+str(progress)+'%',end="\r")    
            #sys.stdout.flush()
            # Get predictions
            optimizer.zero_grad()
            prediction,entity_class,entity_position,entity_link_score = model(input_graph,group_labels)
            # convert target edges dict from complete graph to input graph edges 0s and 1s
    
            # Group loss
            class_weights = group_labels.shape[0]*torch.ones(group_labels.shape)
            class_weights[group_labels.bool()] /= 2*group_labels.sum()
            class_weights[(1-group_labels).bool()] /= 2*(1-group_labels).sum()
            group_loss = F.binary_cross_entropy(prediction,group_labels,weight=class_weights)
            
            # Entity link loss
            entity_link_labels = link_labels[0].float()
            class_weights = entity_link_labels.shape[0]*torch.ones(entity_link_labels.shape)
            class_weights[entity_link_labels.bool()] /= 2*entity_link_labels.sum()
            class_weights[(1-entity_link_labels).bool()] /= 2*(1-entity_link_labels).sum()
            link_loss = F.binary_cross_entropy(entity_link_score,entity_link_labels,weight=class_weights)
           
            # Entity classification
            entity_position_labels = entity_labels[0][:,1:]
            entity_class_labels = entity_labels[0][:,0].long()
            indices = entity_class_labels.view(-1,1)
            one_hot=torch.zeros(entity_class_labels.shape[0], 4)
            entity_class_labels=one_hot.scatter(1, indices, 1)

            labeling_loss = F.binary_cross_entropy(entity_class,entity_class_labels)

            loss=link_loss+labeling_loss+group_loss 
            loss.backward()
           

            epoch_labeling_loss+=float(labeling_loss)
            epoch_group_loss+=float(group_loss)
            epoch_link_loss+=float(link_loss)
            optimizer.step()

            prediction[prediction>model.thresh] = 1
            prediction[prediction<=model.thresh] = 0

        print('\t* Epoch '+str(epoch) +' group loss '+str(float(epoch_group_loss))+' link loss '+str(float(epoch_link_loss)) +' labeling loss '+str(float(epoch_labeling_loss)) +' lr' + str(scheduler.get_lr()[0]))
        print(" Validation \n")
        accuracies = []
        scheduler.step()
        model.training=False
        
        # VALIDATION STEP
        labeling_f1,linking_f1 = test(test_dir,model)
        epoch_acc = labeling_f1*linking_f1
        ### END VAL
        train_log = open('train_log.txt','a')
        train_log.write('\t Epoch '+str(epoch) +' loss '+str(float(loss)) + ' val acc' + str(epoch_acc)+'\n')
        train_log.close()


        if epoch_acc > best_acc:
            best_acc = epoch_acc
            print('new best score',epoch_acc)
            torch.save(model,'model.pt')
            epochs_no_improvement=0
        else:
            epochs_no_improvement+=1
        if epochs_no_improvement>patience:
            print('Epochs no improvement',epochs_no_improvement)
            print('Training finished')
            train_log.close()
            break
    return model

"""# Main"""

#def main():

model = Net(102, 128)

model = train(model)


#if __name__ == "__main__":
#    main()
